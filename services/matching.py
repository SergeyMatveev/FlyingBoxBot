import logging

from telegram import Update, Bot
from telegram.ext import ConversationHandler, CallbackContext

from constants import TOKEN
from database import find_matches, get_active_orders, connect_to_database, get_order_data

PREPARE_MATCHING, MATCHING = range(2)


def prepare_matching(update: Update, context: CallbackContext):
    logging.info(f"User {update.message.from_user.username} entered matching function.")

    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –∏–¥–µ—Ç –ø–æ –ö–∞—Å–∫–∞–¥—É —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏, —Ç–æ–≥–¥–∞ –±–µ—Ä–µ–º –Ω–∞ –≤—Ö–æ–¥ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ —Å order_id

    if context.user_data.get('cascade') is not None:
        if context.user_data['cascade']:
            logging.info(f"User {update.message.from_user.username} entered cascade.")
            return matching(update, context)

    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–¥–µ—Ç –Ω–µ –∏–∑ –ö–∞—Å–∫–∞–¥–∞ —Å–æ–±—ã—Ç–∏–π, –∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–º —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    # - –µ—Å–ª–∏ 1 —Ç–æ —Å—Ä–∞–∑—É –º–µ—Ç—á–∏–Ω–≥ –∑–∞–ø—É—Å–∫–∞–µ–º
    # - –µ—Å–ª–∏ –±–æ–ª–µ–µ 1 —Ç–æ–≥–¥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä
    # - –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, —Ç–æ –≥–æ–≤–æ—Ä–∏–º –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤

    username = update.message.from_user.username
    orders = get_active_orders(username)
    num_orders = len(orders)

    if num_orders == 1:
        last_order = orders[0]
        context.user_data['order_id'] = last_order[0]
        update.message.reply_text(f"–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{last_order[0]},\n"
                                  f"–û—Ç–∫—É–¥–∞: {last_order[2].capitalize()}\n"
                                  f"–ö—É–¥–∞: {last_order[3].capitalize()}\n"
                                  )
        return matching(update, context)
    elif num_orders > 1:
        update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤:")
        for order in orders:
            created_at = order[7].strftime('%d.%m.%Y')
            update.message.reply_text(f"–ó–∞–∫–∞–∑ ‚Ññ{order[0]}, –æ—Ç {created_at}\n"
                                      f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                      f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                      )
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        return MATCHING
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–æ—Å—ã–ª–∫—É –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–∑–∫—É –≤ –º–µ–Ω—é.")
        return ConversationHandler.END


def matching(update: Update, context: CallbackContext):
    context.user_data['order_id'] = int(context.user_data.get('order_id') or update.message.text)
    matches = find_matches(context.user_data['order_id'])

    if matches is None:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        update.message.reply_text('–¢–∞–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç.')
    elif matches is False:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.')
    elif not matches:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
        update.message.reply_text('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—å–µ—Ä, –í–∞–º —Å—Ä–∞–∑—É –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.')

    else:
        if len(matches) > 5:
            update.message.reply_text(f'–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {len(matches)}.')
            orders_to_show = matches[:5]
        else:
            orders_to_show = matches

        for order in orders_to_show:
            created_at = order[7].strftime('%d.%m.%Y')
            send_date = order[5].strftime('%d.%m.%Y')

            if order[9]:
                message_text = (f"üì¶ –ü–æ—Å—ã–ª–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                f"–ö—Ç–æ: @{order[1]}\n"
                                f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                f"–í–µ—Å: {float(order[4])} –∫–≥\n"
                                f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_date}\n"
                                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")
            else:
                message_text = (f"‚úàÔ∏è –ü–µ—Ä–µ–≤–æ–∑–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                f"–ö—Ç–æ: @{order[1]}\n"
                                f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                f"–ú–æ–∂–µ—Ç –≤–∑—è—Ç—å: {float(order[4])} –∫–≥\n"
                                f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {send_date}\n"
                                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")

            update.message.reply_text(message_text)

        update.message.reply_text('–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã.\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.')
        if context.user_data.get('cascade') is not None:
            if context.user_data['cascade']:
                send_notification(update, context, matches)
                update.message.reply_text('–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ –ª—é–¥—è–º —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º.')
    context.user_data['order_id'] = None
    return ConversationHandler.END


def send_notification(update, context, orders_to_notify):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤.
    """
    bot = Bot(TOKEN)
    order = get_order_data(context.user_data['order_id'])

    for order_to_notify in orders_to_notify:
        try:
            conn = connect_to_database()
            cursor = conn.cursor()
            cursor.execute("SELECT chat_id FROM orders WHERE order_id = %s", (order_to_notify[0],))
            chat_id = cursor.fetchone()[0]

            if chat_id:
                message = f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É. \n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{order[1]}.\n–í–æ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞."
                bot.send_message(chat_id, message)
                created_at = order[7].strftime('%d.%m.%Y')
                send_date = order[5].strftime('%d.%m.%Y')

                if order[9]:
                    message_text = (f"üì¶ –ü–æ—Å—ã–ª–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                    f"–ö—Ç–æ: @{order[1]}\n"
                                    f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                    f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                    f"–í–µ—Å: {float(order[4])} –∫–≥\n"
                                    f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_date}\n"
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")
                else:
                    message_text = (f"‚úàÔ∏è –ü–µ—Ä–µ–≤–æ–∑–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                    f"–ö—Ç–æ: @{order[1]}\n"
                                    f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                    f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                    f"–ú–æ–∂–µ—Ç –≤–∑—è—Ç—å: {float(order[4])} –∫–≥\n"
                                    f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {send_date}\n"
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")

                bot.send_message(chat_id, message_text)

            cursor.close()
            context.user_data['cascade'] = False
        except Exception as error:
            print(error)
        finally:
            if conn:
                conn.close()
