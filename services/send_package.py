import logging

from telegram.ext import ConversationHandler
from constants import MAX_ATTEMPTS
from database import save_order_in_database
from datetime import datetime, date
import re
from dateutil.relativedelta import relativedelta
import json

from services.matching import prepare_matching

CITY_FROM, CITY_TO, WEIGHT, SEND_DATE, WHAT_IS_INSIDE = range(5)

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON-—Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤
with open('cities.json', 'r', encoding='utf-8') as f:
    cities_data = json.load(f)


def parse_weight(weight_str):
    weight_str = weight_str.replace(',', '.')
    match = re.search(r'(\d+(\.\d+)?)', weight_str)
    if match:
        return float(match.group(1))
    else:
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
def check_city_exists(city_name):
    for city in cities_data['city']:
        if city['name'].lower() == city_name.lower():
            return True
    return False


def send_package(update, context):
    logging.info(f"User {update.message.from_user.username} entered send_package function.")

    if 'conversation' in context.user_data and context.user_data['conversation']:
        logging.info(f"Error. User {update.message.from_user.username} tried to start new process without finishing previous.")
        update.message.reply_text(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n–ó–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return ConversationHandler.END
    context.user_data['conversation'] = True

    try:
        update.message.reply_text(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n"
                                  f"–ó–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
                                  f"–®–∞–≥ 1/5. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏:\n")

        context.user_data['country_from_attempts'] = 0
        context.user_data['country_to_attempts'] = 0
        context.user_data['city_from_attempts'] = 0
        context.user_data['city_to_attempts'] = 0
        context.user_data['date_attempts'] = 0

        return CITY_FROM

    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return ConversationHandler.END  # Or some other state indicating an error


def city_from(update, context):
    user_city = update.message.text.lower()

    if len(user_city) >= 50:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return CITY_FROM

    attempts = context.user_data.get('city_from_attempts', 0) + 1
    context.user_data['city_from_attempts'] = attempts

    if check_city_exists(user_city):
        context.user_data['city_from'] = user_city
        context.user_data['city_from_attempts'] = 0
        update.message.reply_text("–®–∞–≥ 2/5. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:")
        return CITY_TO
    else:
        if attempts >= MAX_ATTEMPTS:
            update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 5 —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END
        else:
            update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É:")
            return CITY_FROM


def city_to(update, context):
    user_city = update.message.text.lower()
    attempts = context.user_data.get('city_to_attempts', 0) + 1
    context.user_data['city_to_attempts'] = attempts

    if len(user_city) >= 50:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return CITY_TO

    if check_city_exists(user_city):
        context.user_data['city_to'] = user_city
        context.user_data['city_to_attempts'] = 0
        update.message.reply_text("–®–∞–≥ 3/5. –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏ –≤ –∫–≥:")
        return WEIGHT
    else:
        if attempts >= MAX_ATTEMPTS:
            update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 5 —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END
        else:
            update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
            return CITY_TO


def weight(update, context):
    weight_str = update.message.text

    if len(weight_str) >= 50:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return WEIGHT

    parsed_weight = parse_weight(weight_str)
    if parsed_weight is not None:
        if parsed_weight > 100:
            update.message.reply_text("FlyingBox —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –¥–æ 100 –∫–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å.")
            return WEIGHT  # This will prompt the user to enter the weight again
        else:
            context.user_data['weight'] = parsed_weight
            update.message.reply_text("–®–∞–≥ 4/5. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
            return SEND_DATE
    else:
        update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return WEIGHT


def send_date(update, context):
    user_input = update.message.text

    if len(user_input) >= 50:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return SEND_DATE

    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    user_input = user_input.replace(".", "-").replace("/", "-").replace(",", "-")

    try:
        parsed_date = datetime.strptime(user_input, '%d-%m-%Y').date()  # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formatted_date = parsed_date.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ë–î

        today = date.today()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        nine_months_from_now = today + relativedelta(months=+9)  # –î–∞—Ç–∞ —á–µ—Ä–µ–∑ 9 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Å–µ–≥–æ–¥–Ω—è

        if parsed_date <= today:
            update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º:")
            return SEND_DATE

        if parsed_date > nine_months_from_now:
            update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 9 –º–µ—Å—è—Ü–µ–≤ –æ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:")
            return SEND_DATE

        context.user_data['send_date'] = formatted_date
        context.user_data['date_attempts'] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        update.message.reply_text("–®–∞–≥ 5/5. –ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–æ—Å—ã–ª–∫–∏?")
        return WHAT_IS_INSIDE
    except ValueError:
        date_attempts = context.user_data.get('date_attempts', 0) + 1  # –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        context.user_data['date_attempts'] = date_attempts

        if date_attempts >= MAX_ATTEMPTS:
            update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 5 —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END
        else:
            update.message.reply_text(
                "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
            return SEND_DATE


def what_is_inside(update, context):
    context.user_data['what_is_inside'] = update.message.text

    if len(context.user_data['what_is_inside']) >= 250:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 250 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:")
        return WHAT_IS_INSIDE

    user_data = context.user_data
    is_package = True
    username = update.message.from_user.username
    chat_id = update.message.chat_id

    # insert_request_into_database now returns the order ID instead of True/False
    order_id = save_order_in_database(
        username,
        user_data.get("city_from"),
        user_data.get("city_to"),
        user_data.get("weight"),
        user_data.get("send_date"),
        user_data.get("what_is_inside"),
        is_package,
        chat_id
    )

    if order_id is not None:
        # Include the order ID in the success message
        update.message.reply_text(f"üì¶ –í–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–û–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–æ–∏ –∑–∞–∫–∞–∑—ã.")
        update.message.reply_text("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–æ–≤...")
        context.user_data['order_id'] = order_id
        context.user_data['cascade'] = True
        prepare_matching(update, context)
        context.user_data['conversation'] = False
    else:
        update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–π –ø–æ—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

