import logging
from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
from constants import MAX_ATTEMPTS
from services.send_package import check_city_exists

SHOW_CITY_FROM, SHOW_CITY_TO = range(2)


def show_all_orders(update: Update, context: CallbackContext):
    logging.info(f"User {update.message.from_user.username} entered show_all_orders function.")

    if 'conversation' in context.user_data and context.user_data['conversation']:
        logging.info(f"Error. User {update.message.from_user.username} tried to start new process without finishing previous.")
        update.message.reply_text(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n–ó–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return ConversationHandler.END
    context.user_data['conversation'] = True

    update.message.reply_text(f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.\n"
                              f"–ó–∞–∫–æ–Ω—á–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
                              f"–®–∞–≥ 1/2. –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n")
    return SHOW_CITY_FROM


def show_city_from(update: Update, context: CallbackContext):
    print_user_city = update.message.text

    if len(print_user_city) >= 50:
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel")
        return SHOW_CITY_FROM

    user_city = update.message.text.lower()
    logging.info(f"Received user city: {user_city}")

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    attempts = context.user_data.get('city_from_attempts', 0) + 1
    context.user_data['city_from_attempts'] = attempts

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    if check_city_exists(user_city):
        context.user_data['city_from'] = user_city  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É
        context.user_data['city_from_attempts'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        update.message.reply_text(f'–®–∞–≥ 2/2. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:')
        return SHOW_CITY_TO

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    if attempts >= MAX_ATTEMPTS:
        update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 5 —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    else:
        update.message.reply_text(f"–Ø –Ω–µ –∑–Ω–∞—é –≥–æ—Ä–æ–¥–∞ {print_user_city}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        return SHOW_CITY_FROM  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä


def show_city_to(update: Update, context: CallbackContext):
    print_city_to = update.message.text
    user_city_to = update.message.text.lower()
    logging.info(f"Received user city to: {user_city_to}")

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    attempts = context.user_data.get('city_to_attempts', 0) + 1
    context.user_data['city_to_attempts'] = attempts

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    if check_city_exists(user_city_to):
        context.user_data['city_to'] = user_city_to  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞–Ω—É
        context.user_data['city_to_attempts'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

        orders = get_orders_by_countries(context.user_data['city_from'], context.user_data['city_to'])

        if not orders:
            update.message.reply_text(
                '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –¥–ª—è —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. \n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ –±–ª–∏–∂–∞–π—à–∏–º –≥–æ—Ä–æ–¥–∞–º')
        else:
            if len(orders) > 5:
                update.message.reply_text(f'–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ {len(orders)}.')
                orders_to_show = orders[:5]
            else:
                orders_to_show = orders

            for order in orders_to_show:
                created_at = order[7].strftime('%d.%m.%Y')
                send_date = order[5].strftime('%d.%m.%Y')

                if order[9]:
                    message_text = (f"üì¶ –ü–æ—Å—ã–ª–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                    f"–ö—Ç–æ: @{order[1]}\n"
                                    f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                    f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                    f"–í–µ—Å: {float(order[4])} –∫–≥\n"
                                    f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {send_date}\n"
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")
                else:
                    message_text = (f"‚úàÔ∏è –ü–µ—Ä–µ–≤–æ–∑–∫–∞ ‚Ññ{order[0]} –æ—Ç {created_at}\n"
                                    f"–ö—Ç–æ: @{order[1]}\n"
                                    f"–û—Ç–∫—É–¥–∞: {order[2].capitalize()}\n"
                                    f"–ö—É–¥–∞: {order[3].capitalize()}\n"
                                    f"–ú–æ–∂–µ—Ç –≤–∑—è—Ç—å: {float(order[4])} –∫–≥\n"
                                    f"–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏: {send_date}\n"
                                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[6].capitalize()}\n")

                update.message.reply_text(message_text)

        context.user_data['conversation'] = False
        update.message.reply_text('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.')
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    if attempts >= MAX_ATTEMPTS:
        update.message.reply_text("–í—ã –≤–≤–µ–ª–∏ —Å—Ç—Ä–∞–Ω—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ 5 —Ä–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.")
        context.user_data['conversation'] = False
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
    else:
        update.message.reply_text(f"–Ø –Ω–µ –∑–Ω–∞—é —Å—Ç—Ä–∞–Ω—ã {print_city_to}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        context.user_data['conversation'] = False
        return SHOW_CITY_TO  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
